package utils

import (
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/pocketbase/pocketbase/core"
)

func pbTypeToTS(fieldType string) string {
	switch fieldType {
	case "text", "email", "url", "editor":
		return "string"
	case "relation":
		return "string[]"
	case "bool":
		return "boolean"
	case "number", "date", "autodate":
		return "number"
	case "json":
		return "any"
	default:
		return "unknown"
	}
}

func GenerateTypeScriptSchema(collection *core.Collection) {
	var builder strings.Builder

	// Convert collection name
	typeName := strcase.ToCamel(collection.Name)
	fileName := filepath.Join("..", "webapp", "src", "data", typeName+".ts")

	// Imports
	builder.WriteString("// ⚠️ THIS FILE IS AUTO-GENERATED\n")
	builder.WriteString("// This file is automatically generated based on a collection created in PocketBase. Any changes made here may be lost.\n")
	builder.WriteString("// To update, edit the collection in PocketBase or apply a migration (recommended), then run `pnpm run generate-types`.\n\n")
	builder.WriteString("import { createPBCollectionStore } from \"../lib/PBCollectionStore\";\n\n")

	// Header
	builder.WriteString("export interface " + typeName + " {\n")

	// Fields
	for _, field := range collection.Fields {
		tsType := pbTypeToTS(field.Type())
		builder.WriteString("  " + field.GetName() + ": " + tsType + ";\n")
	}

	builder.WriteString("}\n\n")

	builder.WriteString("export const use" + typeName + "Store = createPBCollectionStore<" + typeName + ">(\"" + collection.Name + "\");\n")

	// Write to file (add error handling)
	os.WriteFile(fileName, []byte(builder.String()), 0644)
	log.Printf("Generated %s", fileName)
}
