"""
GraphQL schema for this app.
WARNING: Do not make changes directly to this file. This is an autogenerated file, and changes will be lost.
To update, edit the GraphQL methods implemented in the server/src/graphql folder, then run 'npm run build' or 'npm run gen-schema'.
"""

type User {
  id: String
  displayName: String
}

type Query {
  me: User
  getUser(id: String): User
  admin_get_users: [UserAdminRecord!]!
  cats: [Cat]
  getTodoItems: [TodoItem!]!
  admin_config_store_items: [ConfigStoreItem!]!
  admin_jobs: [Job!]!
  admin_get_job(jobName: String!): Job
}

type UserAdminRecord {
  id: ID!
  email: String!
  displayName: String
  permissions: [String!]!
}

type Mutation {
  admin_create_user(email: String!, displayName: String!, permissions: [String!]!, password: String!): UserAdminRecord
  admin_delete_user(userID: ID!): Boolean!
  admin_toggle_user_locked(userID: ID!): Boolean!
  admin_change_user_password(userID: ID!, password: String!): Boolean!
  admin_change_user_permissions(userID: ID!, permissions: [String!]!): Boolean!
  createTodoItem(title: String!): TodoItem
  changeTodoItemCompletion(id: ID!, completed: Boolean!): TodoItem
  deleteTodoItem(id: ID!): ID
  admin_create_config_store_item(key: String!, value: String!): ConfigStoreItem
  admin_update_config_store_item(id: ID!, value: String!): ConfigStoreItem
  admin_delete_config_store_item(id: ID!): Boolean!
}

type Cat {
  name: String
}

type TodoItem {
  id: ID!
  title: String!
  isCompleted: Boolean!
}

type ConfigStoreItem {
  id: ID!
  key: String!
  value: String!
  modifiedTime: String!
}

type JobRun {
  id: String!
  status: String!
  enqueuedTime: String!
  startedTime: String
  finishedTime: String
  logs: String!
}

type Job {
  name: String!
  cronSchedule: String
  description: String
  enabled: Boolean
  runs: [JobRun!]!
  lastRun: JobRun
}

schema {
  query: Query
  mutation: Mutation
}